use clap::{App, AppSettings, Arg, SubCommand};

pub fn initialize () -> App<'static, 'static>{
let mut cli_args = App::new("Rusty hunter - database")
.setting(AppSettings::SubcommandRequiredElseHelp )
.version("0.01")
.author("xD")
.arg(Arg::with_name("config")
    .short("c")
    .long("config")
    .value_name("FILE")
    .help("Set full path to custom config file")
    .takes_value(true))
.subcommand(SubCommand::with_name("write")
    .arg(Arg::with_name("set target")
        .required(true)
        .takes_value(true)
        .help("Set the target name that will be used for storing the data")
        .short("t"))
    .arg(Arg::with_name("set host")
        .takes_value(true)
        .short("h")
        .help("Optional -- explicitely specifies the host that will be used instead of infering the host from the urls"))
    .arg(Arg::with_name("stdin")
         .required_unless("file")
         .long("--stdin")
         .help("When piping input with stdin, please enable this flag with --stdin"))
    .arg(Arg::with_name("file")
         .short("f")
        .required_unless("stdin")
        .takes_value(true)
        .value_name("FILE")
        .help("Specify path to the file you want to import into RHD")
        .conflicts_with("stdin"))
    )
.subcommand(SubCommand::with_name("read")
    .arg(Arg::with_name("set target")
        .short("t")
        .conflicts_with("list all")
        .required_unless("list all")
        .takes_value(true)
        .help("Specify the target name fot the display (if used as only flag the RHD will dump everything about specified target)"))
    .arg(Arg::with_name("list all")
         .long("--list-all")
         .required_unless("set target")
         .conflicts_with_all(&["set target", "set host", "status", "status code", "path", "path comb", "path comb strict"])
         .help("Lists every target in the database -- has to be used as the only flag"))
    .arg(Arg::with_name("set host")
         .short("h")
         .multiple(true)
         .takes_value(true)
         .multiple(true)
         .help("Further modify the scope of the query -- shows only the results that have the corresponding host"))
    .arg(Arg::with_name("status code")
         .long("--status-code")
         .takes_value(true)
         .long_help("Further modify the scope of the query -- shows only the results that have the corresponding status code(s) -- you can specify multiple status codes separated by comma e.g. --status-code 200, 301")
         .multiple(true))
    .arg(Arg::with_name("path")
         .long("--path")
         .conflicts_with_all(&["path comb", "path comb strict"])
         .long_help("Displays only path part of the stored urls according to the previous query modifiers, e.g. RHD read -t 'target' --status-code 200  -- will only display 'path' portion of the urls that have the status code of 200"))
    .arg(Arg::with_name("path comb")
         .long("--path-comb")
         .conflicts_with_all(&["path", "path comb strict"])
         .long_help("If this flag is enabled the RHD will automatically try and combine all known paths in specified target with the filtered hosts of given query e.g. RHD read -t 'target' --status-code 200, 301 --- this will combine all known paths from 'target' with hosts that returned 200 or 301  "))
    .arg(Arg::with_name("path comb strict")));
    cli_args
}
